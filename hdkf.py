import hashlib
import hmac

hash_len = 32


def hmac_sha256(key: bytes, data: bytes):
    """
    Returns the HMAC-SHA256 digest of the given data using the provided key.

    :param key: The secret key to use for the HMAC.
    :param data: The input message to compute the HMAC.
    :return: The HMAC-SHA256 digest of the data.
    """
    return hmac.new(key, data, hashlib.sha256).digest()


def hkdf_extract(salt: bytes, ikm: bytes) -> bytes:
    """
    Extracts a pseudorandom key from the input keying material using HKDF's extraction step.

    :param salt: Optional salt value (a non-secret random value), or a string of zeros of hash_len length.
    :param ikm: The input keying material (IKM).
    :return: A pseudorandom key (PRK).
    """
    if len(salt) == 0:
        salt = bytes([0] * hash_len)
    return hmac_sha256(salt, ikm)


def hkdf_expand(prk: bytes, info: bytes, length: int) -> bytes:
    """
    Expands the pseudorandom key into several subkeys using HKDF's expansion step.

    :param prk: A pseudorandom key generated by the HKDF extract step.
    :param info: Optional context and application specific information.
    :param length: The desired length of the output key material.
    :return: Key material derived from the PRK.
    """
    t = b""
    okm = b""
    i = 0
    while len(okm) < length:
        i += 1
        t = hmac_sha256(prk, t + info + bytes([i % 256]))
        okm += t
    return okm[:length]


def hkdf(salt: bytes, ikm: bytes, info: bytes, length: int) -> bytes:
    """
    Derives a set of cryptographically strong keys from the input key material using HKDF.

    :param salt: Optional salt value (a non-secret random value), or a string of zeros of hash_len length.
    :param ikm: The input keying material (IKM).
    :param info: Optional context and application specific information.
    :param length: The desired length of the output key material.
    :return: Key material derived from the IKM.
    """
    prk = hkdf_extract(salt, ikm)
    return hkdf_expand(prk, info, length)
